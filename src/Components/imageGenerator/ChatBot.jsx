import React, { useState, useRef } from 'react';
import './ChatBot.css'; // Custom styling
import ScrollToBottom from 'react-scroll-to-bottom'; // To auto-scroll the chat window

const ChatBot = () => {
    const [messages, setMessages] = useState([]); // Stores chat messages
    const [loading, setLoading] = useState(false); // Loading state
    const inputRef = useRef(null); // Input field reference

    // Function to handle sending the user's message (prompt) and receiving the bot's response (generated image)
    const sendMessage = async () => {
        const userPrompt = inputRef.current.value;

        if (userPrompt === "") {
            return; // Exit if input is empty
        }

        // Add user's message to chat
        const newMessages = [...messages, { type: "user", content: userPrompt }];
        setMessages(newMessages);

        // Clear the input field
        inputRef.current.value = "";

        // Show loading state
        setLoading(true);

        try {
            // Send the user's prompt to the backend
            const response = await fetch("http://localhost:5001/generate-image", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    prompt: userPrompt, // Send prompt to backend
                }),
            });

            if (!response.ok) {
                throw new Error("Failed to generate image");
            }

            const data = await response.json();

            if (data.image) {
                // Add the bot's response (image) to chat
                const botResponse = `data:image/png;base64,${data.image}`;
                setMessages([...newMessages, { type: "bot", content: botResponse }]);
            }
        } catch (error) {
            console.error("Error generating image:", error);
        } finally {
            setLoading(false); // Remove loading state
        }
    };

    return (
        <div className="chatbot-container">
            <ScrollToBottom className="message-list">
                {messages.map((message, index) => (
                    <div key={index} className={`message ${message.type}`}>
                        {message.type === "user" ? (
                            <p>{message.content}</p>
                        ) : (
                            <img src={message.content} alt="Generated by AI" className="generated-image" />
                        )}
                    </div>
                ))}
                {loading && <p>Generating image...</p>}
            </ScrollToBottom>

            <div className="chat-input-container">
                <input
                    type="text"
                    placeholder="Type your prompt here..."
                    className="chat-input"
                    ref={inputRef}
                />
                <button onClick={sendMessage} className="send-btn">
                    Send
                </button>
            </div>
        </div>
    );
};

export default ChatBot;
